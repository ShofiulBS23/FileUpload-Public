@model List<File_Public.Models.VmFileNameAndExtension>
@using File_Public.Constants;


<style>
    .copy-link-button:focus{
        outline: none;
        box-shadow: none;
    }

    .fa-copy:hover::before{
        content: "Copy Link";
        font-size: 10px;
    }
</style>

<h3 class="text-primary">Available files</h3>
<p class="text-info">To download the file click on it or use Download(.zip) button to download all of them</p>

<section class="row">
    <div class="col-md-7 col-12">
        <ul>
            @{
                foreach(var item in Model) {
                    string url = $"/Home/GetFile?ClientId={Uri.EscapeDataString(item.ClientId)}&DocName={Uri.EscapeDataString(item.DocName)}&DocGroup={Uri.EscapeDataString(item.DocGroup)}&DocExt={Uri.EscapeDataString(item.DocExt)}&isin={Uri.EscapeDataString(item.Isin)}&Language={Uri.EscapeDataString(item.Language)}&DocDate={Uri.EscapeDataString(item.DocDate.ToString())}";

                    string fileName = $"{item.Isin}_{item.Language}_{item.DocGroup}.{item.DocExt}";
                                <li>
                                    <a href="@url" target="_blank"><i class="fa fa-download"></i>@fileName</a>
                                    <button class="btn copy-link-button p-0" onclick="return downlaodVm.copyLink(event)"><i class="fa-regular fa-copy d-inline p-2"></i></button>
                                    <span class="text-info mt-2"></span>
                                </li>
                }
                if(Model.Count == 0) {
                      <p>No file available</p>
                }
              }
            
        </ul>
    </div>
    <div class="col-md-5 col-12">
        @if (Model.Count > 0) {
            <button class="btn btn-primary" onclick="downlaodVm.downloadAll()">Download(.zip)</button>
        }

    </div>
</section>

@section Scripts{
    <script>
        var downlaodVm = {
            url: '/Home/GetFiles',
            isCopying: false,

            copyLink(e){
                e.stopPropagation();
                if (downlaodVm.isCopying) return !downlaodVm.isCopying;
                downlaodVm.isCopying = true;

                const siblings = $(e.target).parent().siblings();
                const anchorTag = siblings.first();
                const info = siblings.last();
                const link = window.location.origin + anchorTag.attr('href');
                navigator.clipboard.writeText(link)
                    .then(() => {
                        info.text('Link copied');
                        setTimeout(() => {
                            info.text('');
                            downlaodVm.isCopying = false;
                            return !downlaodVm.isCopying;
                        }, 400);
                    })
                    .catch(err => {
                        console.error('Failed to copy link: ', err);
                    });
            },

            downloadAll(){
                let first = true;
                const urlParams = new URLSearchParams(window.location.search);
                let params;
                for (let key of urlParams.keys()) {
                    if (urlParams.has(key)) {
                        if (first) {
                            first = false;
                            params = '?' + key + '=' +urlParams.get(key);
                            downlaodVm.url += params
                        } else {
                            params = '&' + key + '=' + urlParams.get(key);
                            downlaodVm.url += params
                        } 
                    }
                }
                const link = document.createElement('a');
                link.setAttribute('href', window.location.origin + downlaodVm.url);
                link.setAttribute('target', '_blank');

                link.click();
            }
        }
    </script>
}